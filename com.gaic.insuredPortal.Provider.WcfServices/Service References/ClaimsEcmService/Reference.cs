//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://claimsecmservices.gaic.com/", ConfigurationName="ClaimsEcmService.ECMServiceSoap")]
    public interface ECMServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetAnnotations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetAnnotations(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetAnnotations", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetAnnotationsAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        byte[][] GetDocument(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<byte[][]> GetDocumentAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/CopyClaimDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CopyClaimDocument(string documentId, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, bool copyAnnot, string secTemplate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/CopyClaimDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CopyClaimDocumentAsync(string documentId, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, bool copyAnnot, string secTemplate);
        
        // CODEGEN: Parameter 'pages' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlArrayItemAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/MergeDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.MergeDocumentResponse MergeDocument(com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.MergeDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/MergeDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.MergeDocumentResponse> MergeDocumentAsync(com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.MergeDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/SplitClaimDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SplitClaimDocument(string documentId, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, bool copyAnot, int[] pages, string secTemplateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/SplitClaimDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SplitClaimDocumentAsync(string documentId, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, bool copyAnot, int[] pages, string secTemplateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/SearchDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] SearchDocuments(string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/SearchDocuments", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> SearchDocumentsAsync(string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/SearchDocumentProperties", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Document[] SearchDocumentProperties(string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/SearchDocumentProperties", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Document[]> SearchDocumentPropertiesAsync(string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/SearchDocumentPropertiesDSL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Document[] SearchDocumentPropertiesDSL(string[] selectArry, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/SearchDocumentPropertiesDSL", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Document[]> SearchDocumentPropertiesDSLAsync(string[] selectArry, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentUrl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentContentUrl(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentUrl", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentContentUrlAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentURLAnnoView", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentContentURLAnnoView(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentURLAnnoView", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentContentURLAnnoViewAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentURLNoAnnoView", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentContentURLNoAnnoView(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentURLNoAnnoView", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentContentURLNoAnnoViewAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentUrlExternalAnnoView", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentContentUrlExternalAnnoView(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentUrlExternalAnnoView", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentContentUrlExternalAnnoViewAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentUrIExternalAnnoView", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentContentUrIExternalAnnoView(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentUrIExternalAnnoView", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentContentUrIExternalAnnoViewAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentUrlExternalNoAnnoView", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentContentUrlExternalNoAnnoView(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentUrlExternalNoAnnoView", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentContentUrlExternalNoAnnoViewAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentUrIExternalNoAnnoView", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentContentUrIExternalNoAnnoView(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentUrIExternalNoAnnoView", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentContentUrIExternalNoAnnoViewAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentUrlExternal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentContentUrlExternal(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentUrlExternal", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentContentUrlExternalAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentUrIExternal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentContentUrIExternal(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetDocumentContentUrIExternal", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentContentUrIExternalAsync(string documentId);
        
        // CODEGEN: Parameter 'content' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/AddDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.AddDocumentResponse AddDocument(com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.AddDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/AddDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.AddDocumentResponse> AddDocumentAsync(com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.AddDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/AddMultiContentDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string AddMultiContentDocument(byte[][] content, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string documentClass, string secTemplateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/AddMultiContentDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<string> AddMultiContentDocumentAsync(byte[][] content, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string documentClass, string secTemplateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/UpdateDocumentProperties", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateDocumentProperties(string docId, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string secTemplateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/UpdateDocumentProperties", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateDocumentPropertiesAsync(string docId, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string secTemplateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/SearchDocumentByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Document SearchDocumentByID(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/SearchDocumentByID", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Document> SearchDocumentByIDAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/ConvertDateToW3CFormat", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ConvertDateToW3CFormat(string simpleDtString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/ConvertDateToW3CFormat", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ConvertDateToW3CFormatAsync(string simpleDtString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/ConversionUpdateDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ConversionUpdateDocument(string IsDocID, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string secTemplateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/ConversionUpdateDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ConversionUpdateDocumentAsync(string IsDocID, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string secTemplateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/UpdateDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateDocuments(string[] ids, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string[] secTemplateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/UpdateDocuments", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateDocumentsAsync(string[] ids, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string[] secTemplateName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetVersion", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/TestClaimsECMService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string TestClaimsECMService();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/TestClaimsECMService", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TestClaimsECMServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetBravaMultiDocumentsContentURI", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetBravaMultiDocumentsContentURI(string[] documentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetBravaMultiDocumentsContentURI", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetBravaMultiDocumentsContentURIAsync(string[] documentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetBravaMultiDocsPOSTParam", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetBravaMultiDocsPOSTParam(string paramName, string[] documentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://claimsecmservices.gaic.com/GetBravaMultiDocsPOSTParam", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetBravaMultiDocsPOSTParamAsync(string paramName, string[] documentIds);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://claimsecmservices.gaic.com/")]
    public partial class Property : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://claimsecmservices.gaic.com/")]
    public partial class Document : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Property[] propertyField;
        
        private string idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Property", Order=0)]
        public Property[] Property {
            get {
                return this.propertyField;
            }
            set {
                this.propertyField = value;
                this.RaisePropertyChanged("Property");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MergeDocument", WrapperNamespace="http://claimsecmservices.gaic.com/", IsWrapped=true)]
    public partial class MergeDocumentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://claimsecmservices.gaic.com/", Order=0)]
        public string[] documentIds;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://claimsecmservices.gaic.com/", Order=1)]
        public com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://claimsecmservices.gaic.com/", Order=2)]
        [System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfInt")]
        [System.Xml.Serialization.XmlArrayItemAttribute(IsNullable=false, NestingLevel=1)]
        public int[][] pages;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://claimsecmservices.gaic.com/", Order=3)]
        public bool copyAnnot;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://claimsecmservices.gaic.com/", Order=4)]
        public string secTemplateName;
        
        public MergeDocumentRequest() {
        }
        
        public MergeDocumentRequest(string[] documentIds, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, int[][] pages, bool copyAnnot, string secTemplateName) {
            this.documentIds = documentIds;
            this.metadata = metadata;
            this.pages = pages;
            this.copyAnnot = copyAnnot;
            this.secTemplateName = secTemplateName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MergeDocumentResponse", WrapperNamespace="http://claimsecmservices.gaic.com/", IsWrapped=true)]
    public partial class MergeDocumentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://claimsecmservices.gaic.com/", Order=0)]
        public string MergeDocumentResult;
        
        public MergeDocumentResponse() {
        }
        
        public MergeDocumentResponse(string MergeDocumentResult) {
            this.MergeDocumentResult = MergeDocumentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddDocument", WrapperNamespace="http://claimsecmservices.gaic.com/", IsWrapped=true)]
    public partial class AddDocumentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://claimsecmservices.gaic.com/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] content;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://claimsecmservices.gaic.com/", Order=1)]
        public com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://claimsecmservices.gaic.com/", Order=2)]
        public string documentClass;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://claimsecmservices.gaic.com/", Order=3)]
        public string secTemplateName;
        
        public AddDocumentRequest() {
        }
        
        public AddDocumentRequest(byte[] content, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string documentClass, string secTemplateName) {
            this.content = content;
            this.metadata = metadata;
            this.documentClass = documentClass;
            this.secTemplateName = secTemplateName;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddDocumentResponse", WrapperNamespace="http://claimsecmservices.gaic.com/", IsWrapped=true)]
    public partial class AddDocumentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://claimsecmservices.gaic.com/", Order=0)]
        public string AddDocumentResult;
        
        public AddDocumentResponse() {
        }
        
        public AddDocumentResponse(string AddDocumentResult) {
            this.AddDocumentResult = AddDocumentResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ECMServiceSoapChannel : com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.ECMServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ECMServiceSoapClient : System.ServiceModel.ClientBase<com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.ECMServiceSoap>, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.ECMServiceSoap {
        
        public ECMServiceSoapClient() {
        }
        
        public ECMServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ECMServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ECMServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ECMServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetAnnotations(string documentId) {
            return base.Channel.GetAnnotations(documentId);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAnnotationsAsync(string documentId) {
            return base.Channel.GetAnnotationsAsync(documentId);
        }
        
        public byte[][] GetDocument(string documentId) {
            return base.Channel.GetDocument(documentId);
        }
        
        public System.Threading.Tasks.Task<byte[][]> GetDocumentAsync(string documentId) {
            return base.Channel.GetDocumentAsync(documentId);
        }
        
        public string CopyClaimDocument(string documentId, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, bool copyAnnot, string secTemplate) {
            return base.Channel.CopyClaimDocument(documentId, metadata, copyAnnot, secTemplate);
        }
        
        public System.Threading.Tasks.Task<string> CopyClaimDocumentAsync(string documentId, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, bool copyAnnot, string secTemplate) {
            return base.Channel.CopyClaimDocumentAsync(documentId, metadata, copyAnnot, secTemplate);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.MergeDocumentResponse com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.ECMServiceSoap.MergeDocument(com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.MergeDocumentRequest request) {
            return base.Channel.MergeDocument(request);
        }
        
        public string MergeDocument(string[] documentIds, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, int[][] pages, bool copyAnnot, string secTemplateName) {
            com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.MergeDocumentRequest inValue = new com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.MergeDocumentRequest();
            inValue.documentIds = documentIds;
            inValue.metadata = metadata;
            inValue.pages = pages;
            inValue.copyAnnot = copyAnnot;
            inValue.secTemplateName = secTemplateName;
            com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.MergeDocumentResponse retVal = ((com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.ECMServiceSoap)(this)).MergeDocument(inValue);
            return retVal.MergeDocumentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.MergeDocumentResponse> com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.ECMServiceSoap.MergeDocumentAsync(com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.MergeDocumentRequest request) {
            return base.Channel.MergeDocumentAsync(request);
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.MergeDocumentResponse> MergeDocumentAsync(string[] documentIds, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, int[][] pages, bool copyAnnot, string secTemplateName) {
            com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.MergeDocumentRequest inValue = new com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.MergeDocumentRequest();
            inValue.documentIds = documentIds;
            inValue.metadata = metadata;
            inValue.pages = pages;
            inValue.copyAnnot = copyAnnot;
            inValue.secTemplateName = secTemplateName;
            return ((com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.ECMServiceSoap)(this)).MergeDocumentAsync(inValue);
        }
        
        public string SplitClaimDocument(string documentId, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, bool copyAnot, int[] pages, string secTemplateName) {
            return base.Channel.SplitClaimDocument(documentId, metadata, copyAnot, pages, secTemplateName);
        }
        
        public System.Threading.Tasks.Task<string> SplitClaimDocumentAsync(string documentId, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, bool copyAnot, int[] pages, string secTemplateName) {
            return base.Channel.SplitClaimDocumentAsync(documentId, metadata, copyAnot, pages, secTemplateName);
        }
        
        public string[] SearchDocuments(string whereClause) {
            return base.Channel.SearchDocuments(whereClause);
        }
        
        public System.Threading.Tasks.Task<string[]> SearchDocumentsAsync(string whereClause) {
            return base.Channel.SearchDocumentsAsync(whereClause);
        }
        
        public com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Document[] SearchDocumentProperties(string whereClause) {
            return base.Channel.SearchDocumentProperties(whereClause);
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Document[]> SearchDocumentPropertiesAsync(string whereClause) {
            return base.Channel.SearchDocumentPropertiesAsync(whereClause);
        }
        
        public com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Document[] SearchDocumentPropertiesDSL(string[] selectArry, string whereClause) {
            return base.Channel.SearchDocumentPropertiesDSL(selectArry, whereClause);
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Document[]> SearchDocumentPropertiesDSLAsync(string[] selectArry, string whereClause) {
            return base.Channel.SearchDocumentPropertiesDSLAsync(selectArry, whereClause);
        }
        
        public string GetDocumentContentUrl(string documentId) {
            return base.Channel.GetDocumentContentUrl(documentId);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentContentUrlAsync(string documentId) {
            return base.Channel.GetDocumentContentUrlAsync(documentId);
        }
        
        public string GetDocumentContentURLAnnoView(string documentId) {
            return base.Channel.GetDocumentContentURLAnnoView(documentId);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentContentURLAnnoViewAsync(string documentId) {
            return base.Channel.GetDocumentContentURLAnnoViewAsync(documentId);
        }
        
        public string GetDocumentContentURLNoAnnoView(string documentId) {
            return base.Channel.GetDocumentContentURLNoAnnoView(documentId);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentContentURLNoAnnoViewAsync(string documentId) {
            return base.Channel.GetDocumentContentURLNoAnnoViewAsync(documentId);
        }
        
        public string GetDocumentContentUrlExternalAnnoView(string documentId) {
            return base.Channel.GetDocumentContentUrlExternalAnnoView(documentId);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentContentUrlExternalAnnoViewAsync(string documentId) {
            return base.Channel.GetDocumentContentUrlExternalAnnoViewAsync(documentId);
        }
        
        public string GetDocumentContentUrIExternalAnnoView(string documentId) {
            return base.Channel.GetDocumentContentUrIExternalAnnoView(documentId);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentContentUrIExternalAnnoViewAsync(string documentId) {
            return base.Channel.GetDocumentContentUrIExternalAnnoViewAsync(documentId);
        }
        
        public string GetDocumentContentUrlExternalNoAnnoView(string documentId) {
            return base.Channel.GetDocumentContentUrlExternalNoAnnoView(documentId);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentContentUrlExternalNoAnnoViewAsync(string documentId) {
            return base.Channel.GetDocumentContentUrlExternalNoAnnoViewAsync(documentId);
        }
        
        public string GetDocumentContentUrIExternalNoAnnoView(string documentId) {
            return base.Channel.GetDocumentContentUrIExternalNoAnnoView(documentId);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentContentUrIExternalNoAnnoViewAsync(string documentId) {
            return base.Channel.GetDocumentContentUrIExternalNoAnnoViewAsync(documentId);
        }
        
        public string GetDocumentContentUrlExternal(string documentId) {
            return base.Channel.GetDocumentContentUrlExternal(documentId);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentContentUrlExternalAsync(string documentId) {
            return base.Channel.GetDocumentContentUrlExternalAsync(documentId);
        }
        
        public string GetDocumentContentUrIExternal(string documentId) {
            return base.Channel.GetDocumentContentUrIExternal(documentId);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentContentUrIExternalAsync(string documentId) {
            return base.Channel.GetDocumentContentUrIExternalAsync(documentId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.AddDocumentResponse com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.ECMServiceSoap.AddDocument(com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.AddDocumentRequest request) {
            return base.Channel.AddDocument(request);
        }
        
        public string AddDocument(byte[] content, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string documentClass, string secTemplateName) {
            com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.AddDocumentRequest inValue = new com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.AddDocumentRequest();
            inValue.content = content;
            inValue.metadata = metadata;
            inValue.documentClass = documentClass;
            inValue.secTemplateName = secTemplateName;
            com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.AddDocumentResponse retVal = ((com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.ECMServiceSoap)(this)).AddDocument(inValue);
            return retVal.AddDocumentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.AddDocumentResponse> com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.ECMServiceSoap.AddDocumentAsync(com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.AddDocumentRequest request) {
            return base.Channel.AddDocumentAsync(request);
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.AddDocumentResponse> AddDocumentAsync(byte[] content, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string documentClass, string secTemplateName) {
            com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.AddDocumentRequest inValue = new com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.AddDocumentRequest();
            inValue.content = content;
            inValue.metadata = metadata;
            inValue.documentClass = documentClass;
            inValue.secTemplateName = secTemplateName;
            return ((com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.ECMServiceSoap)(this)).AddDocumentAsync(inValue);
        }
        
        public string AddMultiContentDocument(byte[][] content, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string documentClass, string secTemplateName) {
            return base.Channel.AddMultiContentDocument(content, metadata, documentClass, secTemplateName);
        }
        
        public System.Threading.Tasks.Task<string> AddMultiContentDocumentAsync(byte[][] content, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string documentClass, string secTemplateName) {
            return base.Channel.AddMultiContentDocumentAsync(content, metadata, documentClass, secTemplateName);
        }
        
        public string UpdateDocumentProperties(string docId, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string secTemplateName) {
            return base.Channel.UpdateDocumentProperties(docId, metadata, secTemplateName);
        }
        
        public System.Threading.Tasks.Task<string> UpdateDocumentPropertiesAsync(string docId, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string secTemplateName) {
            return base.Channel.UpdateDocumentPropertiesAsync(docId, metadata, secTemplateName);
        }
        
        public com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Document SearchDocumentByID(string documentId) {
            return base.Channel.SearchDocumentByID(documentId);
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Document> SearchDocumentByIDAsync(string documentId) {
            return base.Channel.SearchDocumentByIDAsync(documentId);
        }
        
        public string ConvertDateToW3CFormat(string simpleDtString) {
            return base.Channel.ConvertDateToW3CFormat(simpleDtString);
        }
        
        public System.Threading.Tasks.Task<string> ConvertDateToW3CFormatAsync(string simpleDtString) {
            return base.Channel.ConvertDateToW3CFormatAsync(simpleDtString);
        }
        
        public string ConversionUpdateDocument(string IsDocID, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string secTemplateName) {
            return base.Channel.ConversionUpdateDocument(IsDocID, metadata, secTemplateName);
        }
        
        public System.Threading.Tasks.Task<string> ConversionUpdateDocumentAsync(string IsDocID, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string secTemplateName) {
            return base.Channel.ConversionUpdateDocumentAsync(IsDocID, metadata, secTemplateName);
        }
        
        public string UpdateDocuments(string[] ids, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string[] secTemplateName) {
            return base.Channel.UpdateDocuments(ids, metadata, secTemplateName);
        }
        
        public System.Threading.Tasks.Task<string> UpdateDocumentsAsync(string[] ids, com.gaic.insuredPortal.Provider.WcfServices.ClaimsEcmService.Property[] metadata, string[] secTemplateName) {
            return base.Channel.UpdateDocumentsAsync(ids, metadata, secTemplateName);
        }
        
        public string GetVersion() {
            return base.Channel.GetVersion();
        }
        
        public System.Threading.Tasks.Task<string> GetVersionAsync() {
            return base.Channel.GetVersionAsync();
        }
        
        public string TestClaimsECMService() {
            return base.Channel.TestClaimsECMService();
        }
        
        public System.Threading.Tasks.Task<string> TestClaimsECMServiceAsync() {
            return base.Channel.TestClaimsECMServiceAsync();
        }
        
        public string GetBravaMultiDocumentsContentURI(string[] documentIds) {
            return base.Channel.GetBravaMultiDocumentsContentURI(documentIds);
        }
        
        public System.Threading.Tasks.Task<string> GetBravaMultiDocumentsContentURIAsync(string[] documentIds) {
            return base.Channel.GetBravaMultiDocumentsContentURIAsync(documentIds);
        }
        
        public string GetBravaMultiDocsPOSTParam(string paramName, string[] documentIds) {
            return base.Channel.GetBravaMultiDocsPOSTParam(paramName, documentIds);
        }
        
        public System.Threading.Tasks.Task<string> GetBravaMultiDocsPOSTParamAsync(string paramName, string[] documentIds) {
            return base.Channel.GetBravaMultiDocsPOSTParamAsync(paramName, documentIds);
        }
    }
}
