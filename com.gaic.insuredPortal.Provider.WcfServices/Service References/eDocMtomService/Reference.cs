//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://edocwebservicemtom.gaic.com/", ConfigurationName="eDocMtomService.ECMServiceSoap")]
    public interface ECMServiceSoap {
        
        // CODEGEN: Parameter 'content' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/AddDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddDocumentResponse AddDocument(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/AddDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddDocumentResponse> AddDocumentAsync(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddDocumentRequest request);
        
        // CODEGEN: Parameter 'content' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/AddCustomerDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddCustomerDocumentResponse AddCustomerDocument(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddCustomerDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/AddCustomerDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddCustomerDocumentResponse> AddCustomerDocumentAsync(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddCustomerDocumentRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        byte[][] GetDocument(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<byte[][]> GetDocumentAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocumentContentInline", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        byte[][] GetDocumentContentInline(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocumentContentInline", ReplyAction="*")]
        System.Threading.Tasks.Task<byte[][]> GetDocumentContentInlineAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/CopyDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CopyDocument(string documentId, string docClass, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata, bool copyAnnot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/CopyDocument", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CopyDocumentAsync(string documentId, string docClass, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata, bool copyAnnot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/CopyDocumentsToNewPolicy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CopyDocumentsToNewPolicy(string businessUnit, string oldPolicyNumber, string newPolicyNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/CopyDocumentsToNewPolicy", ReplyAction="*")]
        System.Threading.Tasks.Task CopyDocumentsToNewPolicyAsync(string businessUnit, string oldPolicyNumber, string newPolicyNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/CopyAnnotations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CopyAnnotations(string docId1, string docId2, string os);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/CopyAnnotations", ReplyAction="*")]
        System.Threading.Tasks.Task CopyAnnotationsAsync(string docId1, string docId2, string os);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/CheckOut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CheckOut(string docID, string checkedOutBy, string checkedOutName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/CheckOut", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CheckOutAsync(string docID, string checkedOutBy, string checkedOutName);
        
        // CODEGEN: Parameter 'content' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/CheckIn", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInResponse CheckIn(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/CheckIn", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInResponse> CheckInAsync(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInRequest request);
        
        // CODEGEN: Parameter 'content' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/CheckInWithAnnotations", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithAnnotationsResponse CheckInWithAnnotations(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithAnnotationsRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/CheckInWithAnnotations", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithAnnotationsResponse> CheckInWithAnnotationsAsync(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithAnnotationsRequest request);
        
        // CODEGEN: Parameter 'content' requires additional schema information that cannot be captured using the parameter mode. The specific attribute is 'System.Xml.Serialization.XmlElementAttribute'.
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/CheckInWithUpdate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithUpdateResponse CheckInWithUpdate(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithUpdateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/CheckInWithUpdate", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithUpdateResponse> CheckInWithUpdateAsync(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithUpdateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/CancelCheckOut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CancelCheckOut(string documentID, string reservationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/CancelCheckOut", ReplyAction="*")]
        System.Threading.Tasks.Task CancelCheckOutAsync(string documentID, string reservationID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/SearchDocumentByID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document SearchDocumentByID(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/SearchDocumentByID", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document> SearchDocumentByIDAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/SearchDocumentProperties", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[] SearchDocumentProperties(string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/SearchDocumentProperties", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[]> SearchDocumentPropertiesAsync(string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/SearchDocumentGeneral", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[] SearchDocumentGeneral(string documentClass, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/SearchDocumentGeneral", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[]> SearchDocumentGeneralAsync(string documentClass, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/UpdateDocumentProperties", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateDocumentProperties(string docId, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/UpdateDocumentProperties", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateDocumentPropertiesAsync(string docId, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/UpdateCustomerDocumentProperties", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateCustomerDocumentProperties(string docId, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/UpdateCustomerDocumentProperties", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateCustomerDocumentPropertiesAsync(string docId, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/UpdateDocumentProperty", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateDocumentProperty(string docId, string propertyName, string propertyValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/UpdateDocumentProperty", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateDocumentPropertyAsync(string docId, string propertyName, string propertyValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/UpdateSinglePropertyInMultiDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string UpdateSinglePropertyInMultiDocuments(string businessUnit, string oldPropertyName, string newPropertyName, string oldPropertyValue, string newPropertyValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/UpdateSinglePropertyInMultiDocuments", ReplyAction="*")]
        System.Threading.Tasks.Task<string> UpdateSinglePropertyInMultiDocumentsAsync(string businessUnit, string oldPropertyName, string newPropertyName, string oldPropertyValue, string newPropertyValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/SearchDocumentPropertiesLite", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[] SearchDocumentPropertiesLite(string docClass, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/SearchDocumentPropertiesLite", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[]> SearchDocumentPropertiesLiteAsync(string docClass, string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/SearchDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] SearchDocuments(string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/SearchDocuments", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> SearchDocumentsAsync(string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/SearchDocumentWithCredentials", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[] SearchDocumentWithCredentials(string documentClass, string whereClause, string user, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/SearchDocumentWithCredentials", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[]> SearchDocumentWithCredentialsAsync(string documentClass, string whereClause, string user, string pwd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/SearchPolicyDocuments", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[] SearchPolicyDocuments(string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/SearchPolicyDocuments", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[]> SearchPolicyDocumentsAsync(string whereClause);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocumentContentURI", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentContentURI(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocumentContentURI", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentContentURIAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetBravaMultiDocumentsContentURI", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetBravaMultiDocumentsContentURI(string[] documentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetBravaMultiDocumentsContentURI", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetBravaMultiDocumentsContentURIAsync(string[] documentIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocumentContentUrl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentContentUrl(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocumentContentUrl", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentContentUrlAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocumentContentUrlExternal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentContentUrlExternal(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocumentContentUrlExternal", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentContentUrlExternalAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocumentContentUrlForClaims", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentContentUrlForClaims(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocumentContentUrlForClaims", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentContentUrlForClaimsAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/MyFileGetDocumentContentUrl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MyFileGetDocumentContentUrl(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/MyFileGetDocumentContentUrl", ReplyAction="*")]
        System.Threading.Tasks.Task<string> MyFileGetDocumentContentUrlAsync(string documentId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/PromoteSubmissionToPolicy", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PromoteSubmissionToPolicy(string submissionId, string policyNum, string symbol, string mod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/PromoteSubmissionToPolicy", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PromoteSubmissionToPolicyAsync(string submissionId, string policyNum, string symbol, string mod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/PromoteSubmissionToPolicySHS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PromoteSubmissionToPolicySHS(string submissionId, string policyNum, string symbol, string mod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/PromoteSubmissionToPolicySHS", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PromoteSubmissionToPolicySHSAsync(string submissionId, string policyNum, string symbol, string mod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/PromoteSubmissionToPolicyGeneral", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PromoteSubmissionToPolicyGeneral(string businessUnit, string submissionId, string policyNum, string symbol, string mod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/PromoteSubmissionToPolicyGeneral", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PromoteSubmissionToPolicyGeneralAsync(string businessUnit, string submissionId, string policyNum, string symbol, string mod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/PromoteSubmissionToPolicyByCustomer", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PromoteSubmissionToPolicyByCustomer(string businessUnit, string customerNumber, string policyNum, string symbol, string mod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/PromoteSubmissionToPolicyByCustomer", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PromoteSubmissionToPolicyByCustomerAsync(string businessUnit, string customerNumber, string policyNum, string symbol, string mod);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/DeleteDocument", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void DeleteDocument(string docID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/DeleteDocument", ReplyAction="*")]
        System.Threading.Tasks.Task DeleteDocumentAsync(string docID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocumentSection", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetDocumentSection(string docCategory, string docType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocumentSection", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetDocumentSectionAsync(string docCategory, string docType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetAllDocumentSections", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetAllDocumentSections();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetAllDocumentSections", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetAllDocumentSectionsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocCategory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetDocCategory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocCategory", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetDocCategoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string[] GetDocTypes(string docCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetDocTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<string[]> GetDocTypesAsync(string docCategory);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetSupportedFileTypes", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetSupportedFileTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetSupportedFileTypes", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetSupportedFileTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/ConvertDateToW3CFormat", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string ConvertDateToW3CFormat(string simpleDateString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/ConvertDateToW3CFormat", ReplyAction="*")]
        System.Threading.Tasks.Task<string> ConvertDateToW3CFormatAsync(string simpleDateString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/TestEDocWebService", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string TestEDocWebService();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/TestEDocWebService", ReplyAction="*")]
        System.Threading.Tasks.Task<string> TestEDocWebServiceAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetVersion();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetVersion", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetVersionAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.statusCode GetStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://edocwebservicemtom.gaic.com/GetStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.statusCode> GetStatusAsync();
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://edocwebservicemtom.gaic.com/")]
    public partial class Property : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string nameField;
        
        private string valueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Name {
            get {
                return this.nameField;
            }
            set {
                this.nameField = value;
                this.RaisePropertyChanged("Name");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string Value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
                this.RaisePropertyChanged("Value");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://edocwebservicemtom.gaic.com/")]
    public partial class Document : object, System.ComponentModel.INotifyPropertyChanged {
        
        private Property[] propertyField;
        
        private string idField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("Property", Order=0)]
        public Property[] Property {
            get {
                return this.propertyField;
            }
            set {
                this.propertyField = value;
                this.RaisePropertyChanged("Property");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlAttributeAttribute()]
        public string id {
            get {
                return this.idField;
            }
            set {
                this.idField = value;
                this.RaisePropertyChanged("id");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddDocument", WrapperNamespace="http://edocwebservicemtom.gaic.com/", IsWrapped=true)]
    public partial class AddDocumentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] content;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=1)]
        public com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=2)]
        public string className;
        
        public AddDocumentRequest() {
        }
        
        public AddDocumentRequest(byte[] content, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata, string className) {
            this.content = content;
            this.metadata = metadata;
            this.className = className;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddDocumentResponse", WrapperNamespace="http://edocwebservicemtom.gaic.com/", IsWrapped=true)]
    public partial class AddDocumentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=0)]
        public string AddDocumentResult;
        
        public AddDocumentResponse() {
        }
        
        public AddDocumentResponse(string AddDocumentResult) {
            this.AddDocumentResult = AddDocumentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddCustomerDocument", WrapperNamespace="http://edocwebservicemtom.gaic.com/", IsWrapped=true)]
    public partial class AddCustomerDocumentRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] content;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=1)]
        public com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=2)]
        public string className;
        
        public AddCustomerDocumentRequest() {
        }
        
        public AddCustomerDocumentRequest(byte[] content, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata, string className) {
            this.content = content;
            this.metadata = metadata;
            this.className = className;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="AddCustomerDocumentResponse", WrapperNamespace="http://edocwebservicemtom.gaic.com/", IsWrapped=true)]
    public partial class AddCustomerDocumentResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=0)]
        public string AddCustomerDocumentResult;
        
        public AddCustomerDocumentResponse() {
        }
        
        public AddCustomerDocumentResponse(string AddCustomerDocumentResult) {
            this.AddCustomerDocumentResult = AddCustomerDocumentResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckIn", WrapperNamespace="http://edocwebservicemtom.gaic.com/", IsWrapped=true)]
    public partial class CheckInRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=0)]
        public string docID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=1)]
        public string attachmentFilename;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=2)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] content;
        
        public CheckInRequest() {
        }
        
        public CheckInRequest(string docID, string attachmentFilename, string userName, byte[] content) {
            this.docID = docID;
            this.attachmentFilename = attachmentFilename;
            this.userName = userName;
            this.content = content;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckInResponse", WrapperNamespace="http://edocwebservicemtom.gaic.com/", IsWrapped=true)]
    public partial class CheckInResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=0)]
        public string CheckInResult;
        
        public CheckInResponse() {
        }
        
        public CheckInResponse(string CheckInResult) {
            this.CheckInResult = CheckInResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckInWithAnnotations", WrapperNamespace="http://edocwebservicemtom.gaic.com/", IsWrapped=true)]
    public partial class CheckInWithAnnotationsRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=0)]
        public string docID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=1)]
        public string attachmentFilename;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=2)]
        public string userName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] content;
        
        public CheckInWithAnnotationsRequest() {
        }
        
        public CheckInWithAnnotationsRequest(string docID, string attachmentFilename, string userName, byte[] content) {
            this.docID = docID;
            this.attachmentFilename = attachmentFilename;
            this.userName = userName;
            this.content = content;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckInWithAnnotationsResponse", WrapperNamespace="http://edocwebservicemtom.gaic.com/", IsWrapped=true)]
    public partial class CheckInWithAnnotationsResponse {
        
        public CheckInWithAnnotationsResponse() {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckInWithUpdate", WrapperNamespace="http://edocwebservicemtom.gaic.com/", IsWrapped=true)]
    public partial class CheckInWithUpdateRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=0)]
        public string docID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=1)]
        public string attachmentFilename;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=2)]
        public com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=3)]
        [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] content;
        
        public CheckInWithUpdateRequest() {
        }
        
        public CheckInWithUpdateRequest(string docID, string attachmentFilename, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata, byte[] content) {
            this.docID = docID;
            this.attachmentFilename = attachmentFilename;
            this.metadata = metadata;
            this.content = content;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="CheckInWithUpdateResponse", WrapperNamespace="http://edocwebservicemtom.gaic.com/", IsWrapped=true)]
    public partial class CheckInWithUpdateResponse {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://edocwebservicemtom.gaic.com/", Order=0)]
        public string CheckInWithUpdateResult;
        
        public CheckInWithUpdateResponse() {
        }
        
        public CheckInWithUpdateResponse(string CheckInWithUpdateResult) {
            this.CheckInWithUpdateResult = CheckInWithUpdateResult;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.18408")]
    [System.SerializableAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://edocwebservicemtom.gaic.com/")]
    public enum statusCode {
        
        /// <remarks/>
        NORMAL,
        
        /// <remarks/>
        WARNING,
        
        /// <remarks/>
        ERROR,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ECMServiceSoapChannel : com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ECMServiceSoapClient : System.ServiceModel.ClientBase<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap>, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap {
        
        public ECMServiceSoapClient() {
        }
        
        public ECMServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ECMServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ECMServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ECMServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddDocumentResponse com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap.AddDocument(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddDocumentRequest request) {
            return base.Channel.AddDocument(request);
        }
        
        public string AddDocument(byte[] content, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata, string className) {
            com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddDocumentRequest inValue = new com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddDocumentRequest();
            inValue.content = content;
            inValue.metadata = metadata;
            inValue.className = className;
            com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddDocumentResponse retVal = ((com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap)(this)).AddDocument(inValue);
            return retVal.AddDocumentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddDocumentResponse> com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap.AddDocumentAsync(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddDocumentRequest request) {
            return base.Channel.AddDocumentAsync(request);
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddDocumentResponse> AddDocumentAsync(byte[] content, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata, string className) {
            com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddDocumentRequest inValue = new com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddDocumentRequest();
            inValue.content = content;
            inValue.metadata = metadata;
            inValue.className = className;
            return ((com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap)(this)).AddDocumentAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddCustomerDocumentResponse com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap.AddCustomerDocument(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddCustomerDocumentRequest request) {
            return base.Channel.AddCustomerDocument(request);
        }
        
        public string AddCustomerDocument(byte[] content, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata, string className) {
            com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddCustomerDocumentRequest inValue = new com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddCustomerDocumentRequest();
            inValue.content = content;
            inValue.metadata = metadata;
            inValue.className = className;
            com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddCustomerDocumentResponse retVal = ((com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap)(this)).AddCustomerDocument(inValue);
            return retVal.AddCustomerDocumentResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddCustomerDocumentResponse> com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap.AddCustomerDocumentAsync(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddCustomerDocumentRequest request) {
            return base.Channel.AddCustomerDocumentAsync(request);
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddCustomerDocumentResponse> AddCustomerDocumentAsync(byte[] content, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata, string className) {
            com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddCustomerDocumentRequest inValue = new com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.AddCustomerDocumentRequest();
            inValue.content = content;
            inValue.metadata = metadata;
            inValue.className = className;
            return ((com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap)(this)).AddCustomerDocumentAsync(inValue);
        }
        
        public byte[][] GetDocument(string documentId) {
            return base.Channel.GetDocument(documentId);
        }
        
        public System.Threading.Tasks.Task<byte[][]> GetDocumentAsync(string documentId) {
            return base.Channel.GetDocumentAsync(documentId);
        }
        
        public byte[][] GetDocumentContentInline(string documentId) {
            return base.Channel.GetDocumentContentInline(documentId);
        }
        
        public System.Threading.Tasks.Task<byte[][]> GetDocumentContentInlineAsync(string documentId) {
            return base.Channel.GetDocumentContentInlineAsync(documentId);
        }
        
        public string CopyDocument(string documentId, string docClass, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata, bool copyAnnot) {
            return base.Channel.CopyDocument(documentId, docClass, metadata, copyAnnot);
        }
        
        public System.Threading.Tasks.Task<string> CopyDocumentAsync(string documentId, string docClass, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata, bool copyAnnot) {
            return base.Channel.CopyDocumentAsync(documentId, docClass, metadata, copyAnnot);
        }
        
        public void CopyDocumentsToNewPolicy(string businessUnit, string oldPolicyNumber, string newPolicyNumber) {
            base.Channel.CopyDocumentsToNewPolicy(businessUnit, oldPolicyNumber, newPolicyNumber);
        }
        
        public System.Threading.Tasks.Task CopyDocumentsToNewPolicyAsync(string businessUnit, string oldPolicyNumber, string newPolicyNumber) {
            return base.Channel.CopyDocumentsToNewPolicyAsync(businessUnit, oldPolicyNumber, newPolicyNumber);
        }
        
        public void CopyAnnotations(string docId1, string docId2, string os) {
            base.Channel.CopyAnnotations(docId1, docId2, os);
        }
        
        public System.Threading.Tasks.Task CopyAnnotationsAsync(string docId1, string docId2, string os) {
            return base.Channel.CopyAnnotationsAsync(docId1, docId2, os);
        }
        
        public string CheckOut(string docID, string checkedOutBy, string checkedOutName) {
            return base.Channel.CheckOut(docID, checkedOutBy, checkedOutName);
        }
        
        public System.Threading.Tasks.Task<string> CheckOutAsync(string docID, string checkedOutBy, string checkedOutName) {
            return base.Channel.CheckOutAsync(docID, checkedOutBy, checkedOutName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInResponse com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap.CheckIn(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInRequest request) {
            return base.Channel.CheckIn(request);
        }
        
        public string CheckIn(string docID, string attachmentFilename, string userName, byte[] content) {
            com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInRequest inValue = new com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInRequest();
            inValue.docID = docID;
            inValue.attachmentFilename = attachmentFilename;
            inValue.userName = userName;
            inValue.content = content;
            com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInResponse retVal = ((com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap)(this)).CheckIn(inValue);
            return retVal.CheckInResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInResponse> com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap.CheckInAsync(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInRequest request) {
            return base.Channel.CheckInAsync(request);
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInResponse> CheckInAsync(string docID, string attachmentFilename, string userName, byte[] content) {
            com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInRequest inValue = new com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInRequest();
            inValue.docID = docID;
            inValue.attachmentFilename = attachmentFilename;
            inValue.userName = userName;
            inValue.content = content;
            return ((com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap)(this)).CheckInAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithAnnotationsResponse com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap.CheckInWithAnnotations(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithAnnotationsRequest request) {
            return base.Channel.CheckInWithAnnotations(request);
        }
        
        public void CheckInWithAnnotations(string docID, string attachmentFilename, string userName, byte[] content) {
            com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithAnnotationsRequest inValue = new com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithAnnotationsRequest();
            inValue.docID = docID;
            inValue.attachmentFilename = attachmentFilename;
            inValue.userName = userName;
            inValue.content = content;
            com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithAnnotationsResponse retVal = ((com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap)(this)).CheckInWithAnnotations(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithAnnotationsResponse> com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap.CheckInWithAnnotationsAsync(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithAnnotationsRequest request) {
            return base.Channel.CheckInWithAnnotationsAsync(request);
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithAnnotationsResponse> CheckInWithAnnotationsAsync(string docID, string attachmentFilename, string userName, byte[] content) {
            com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithAnnotationsRequest inValue = new com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithAnnotationsRequest();
            inValue.docID = docID;
            inValue.attachmentFilename = attachmentFilename;
            inValue.userName = userName;
            inValue.content = content;
            return ((com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap)(this)).CheckInWithAnnotationsAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithUpdateResponse com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap.CheckInWithUpdate(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithUpdateRequest request) {
            return base.Channel.CheckInWithUpdate(request);
        }
        
        public string CheckInWithUpdate(string docID, string attachmentFilename, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata, byte[] content) {
            com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithUpdateRequest inValue = new com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithUpdateRequest();
            inValue.docID = docID;
            inValue.attachmentFilename = attachmentFilename;
            inValue.metadata = metadata;
            inValue.content = content;
            com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithUpdateResponse retVal = ((com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap)(this)).CheckInWithUpdate(inValue);
            return retVal.CheckInWithUpdateResult;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithUpdateResponse> com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap.CheckInWithUpdateAsync(com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithUpdateRequest request) {
            return base.Channel.CheckInWithUpdateAsync(request);
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithUpdateResponse> CheckInWithUpdateAsync(string docID, string attachmentFilename, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata, byte[] content) {
            com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithUpdateRequest inValue = new com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.CheckInWithUpdateRequest();
            inValue.docID = docID;
            inValue.attachmentFilename = attachmentFilename;
            inValue.metadata = metadata;
            inValue.content = content;
            return ((com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.ECMServiceSoap)(this)).CheckInWithUpdateAsync(inValue);
        }
        
        public void CancelCheckOut(string documentID, string reservationID) {
            base.Channel.CancelCheckOut(documentID, reservationID);
        }
        
        public System.Threading.Tasks.Task CancelCheckOutAsync(string documentID, string reservationID) {
            return base.Channel.CancelCheckOutAsync(documentID, reservationID);
        }
        
        public com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document SearchDocumentByID(string documentId) {
            return base.Channel.SearchDocumentByID(documentId);
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document> SearchDocumentByIDAsync(string documentId) {
            return base.Channel.SearchDocumentByIDAsync(documentId);
        }
        
        public com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[] SearchDocumentProperties(string whereClause) {
            return base.Channel.SearchDocumentProperties(whereClause);
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[]> SearchDocumentPropertiesAsync(string whereClause) {
            return base.Channel.SearchDocumentPropertiesAsync(whereClause);
        }
        
        public com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[] SearchDocumentGeneral(string documentClass, string whereClause) {
            return base.Channel.SearchDocumentGeneral(documentClass, whereClause);
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[]> SearchDocumentGeneralAsync(string documentClass, string whereClause) {
            return base.Channel.SearchDocumentGeneralAsync(documentClass, whereClause);
        }
        
        public string UpdateDocumentProperties(string docId, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata) {
            return base.Channel.UpdateDocumentProperties(docId, metadata);
        }
        
        public System.Threading.Tasks.Task<string> UpdateDocumentPropertiesAsync(string docId, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata) {
            return base.Channel.UpdateDocumentPropertiesAsync(docId, metadata);
        }
        
        public string UpdateCustomerDocumentProperties(string docId, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata) {
            return base.Channel.UpdateCustomerDocumentProperties(docId, metadata);
        }
        
        public System.Threading.Tasks.Task<string> UpdateCustomerDocumentPropertiesAsync(string docId, com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Property[] metadata) {
            return base.Channel.UpdateCustomerDocumentPropertiesAsync(docId, metadata);
        }
        
        public string UpdateDocumentProperty(string docId, string propertyName, string propertyValue) {
            return base.Channel.UpdateDocumentProperty(docId, propertyName, propertyValue);
        }
        
        public System.Threading.Tasks.Task<string> UpdateDocumentPropertyAsync(string docId, string propertyName, string propertyValue) {
            return base.Channel.UpdateDocumentPropertyAsync(docId, propertyName, propertyValue);
        }
        
        public string UpdateSinglePropertyInMultiDocuments(string businessUnit, string oldPropertyName, string newPropertyName, string oldPropertyValue, string newPropertyValue) {
            return base.Channel.UpdateSinglePropertyInMultiDocuments(businessUnit, oldPropertyName, newPropertyName, oldPropertyValue, newPropertyValue);
        }
        
        public System.Threading.Tasks.Task<string> UpdateSinglePropertyInMultiDocumentsAsync(string businessUnit, string oldPropertyName, string newPropertyName, string oldPropertyValue, string newPropertyValue) {
            return base.Channel.UpdateSinglePropertyInMultiDocumentsAsync(businessUnit, oldPropertyName, newPropertyName, oldPropertyValue, newPropertyValue);
        }
        
        public com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[] SearchDocumentPropertiesLite(string docClass, string whereClause) {
            return base.Channel.SearchDocumentPropertiesLite(docClass, whereClause);
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[]> SearchDocumentPropertiesLiteAsync(string docClass, string whereClause) {
            return base.Channel.SearchDocumentPropertiesLiteAsync(docClass, whereClause);
        }
        
        public string[] SearchDocuments(string whereClause) {
            return base.Channel.SearchDocuments(whereClause);
        }
        
        public System.Threading.Tasks.Task<string[]> SearchDocumentsAsync(string whereClause) {
            return base.Channel.SearchDocumentsAsync(whereClause);
        }
        
        public com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[] SearchDocumentWithCredentials(string documentClass, string whereClause, string user, string pwd) {
            return base.Channel.SearchDocumentWithCredentials(documentClass, whereClause, user, pwd);
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[]> SearchDocumentWithCredentialsAsync(string documentClass, string whereClause, string user, string pwd) {
            return base.Channel.SearchDocumentWithCredentialsAsync(documentClass, whereClause, user, pwd);
        }
        
        public com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[] SearchPolicyDocuments(string whereClause) {
            return base.Channel.SearchPolicyDocuments(whereClause);
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.Document[]> SearchPolicyDocumentsAsync(string whereClause) {
            return base.Channel.SearchPolicyDocumentsAsync(whereClause);
        }
        
        public string GetDocumentContentURI(string documentId) {
            return base.Channel.GetDocumentContentURI(documentId);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentContentURIAsync(string documentId) {
            return base.Channel.GetDocumentContentURIAsync(documentId);
        }
        
        public string GetBravaMultiDocumentsContentURI(string[] documentIds) {
            return base.Channel.GetBravaMultiDocumentsContentURI(documentIds);
        }
        
        public System.Threading.Tasks.Task<string> GetBravaMultiDocumentsContentURIAsync(string[] documentIds) {
            return base.Channel.GetBravaMultiDocumentsContentURIAsync(documentIds);
        }
        
        public string GetDocumentContentUrl(string documentId) {
            return base.Channel.GetDocumentContentUrl(documentId);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentContentUrlAsync(string documentId) {
            return base.Channel.GetDocumentContentUrlAsync(documentId);
        }
        
        public string GetDocumentContentUrlExternal(string documentId) {
            return base.Channel.GetDocumentContentUrlExternal(documentId);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentContentUrlExternalAsync(string documentId) {
            return base.Channel.GetDocumentContentUrlExternalAsync(documentId);
        }
        
        public string GetDocumentContentUrlForClaims(string documentId) {
            return base.Channel.GetDocumentContentUrlForClaims(documentId);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentContentUrlForClaimsAsync(string documentId) {
            return base.Channel.GetDocumentContentUrlForClaimsAsync(documentId);
        }
        
        public string MyFileGetDocumentContentUrl(string documentId) {
            return base.Channel.MyFileGetDocumentContentUrl(documentId);
        }
        
        public System.Threading.Tasks.Task<string> MyFileGetDocumentContentUrlAsync(string documentId) {
            return base.Channel.MyFileGetDocumentContentUrlAsync(documentId);
        }
        
        public string PromoteSubmissionToPolicy(string submissionId, string policyNum, string symbol, string mod) {
            return base.Channel.PromoteSubmissionToPolicy(submissionId, policyNum, symbol, mod);
        }
        
        public System.Threading.Tasks.Task<string> PromoteSubmissionToPolicyAsync(string submissionId, string policyNum, string symbol, string mod) {
            return base.Channel.PromoteSubmissionToPolicyAsync(submissionId, policyNum, symbol, mod);
        }
        
        public string PromoteSubmissionToPolicySHS(string submissionId, string policyNum, string symbol, string mod) {
            return base.Channel.PromoteSubmissionToPolicySHS(submissionId, policyNum, symbol, mod);
        }
        
        public System.Threading.Tasks.Task<string> PromoteSubmissionToPolicySHSAsync(string submissionId, string policyNum, string symbol, string mod) {
            return base.Channel.PromoteSubmissionToPolicySHSAsync(submissionId, policyNum, symbol, mod);
        }
        
        public string PromoteSubmissionToPolicyGeneral(string businessUnit, string submissionId, string policyNum, string symbol, string mod) {
            return base.Channel.PromoteSubmissionToPolicyGeneral(businessUnit, submissionId, policyNum, symbol, mod);
        }
        
        public System.Threading.Tasks.Task<string> PromoteSubmissionToPolicyGeneralAsync(string businessUnit, string submissionId, string policyNum, string symbol, string mod) {
            return base.Channel.PromoteSubmissionToPolicyGeneralAsync(businessUnit, submissionId, policyNum, symbol, mod);
        }
        
        public string PromoteSubmissionToPolicyByCustomer(string businessUnit, string customerNumber, string policyNum, string symbol, string mod) {
            return base.Channel.PromoteSubmissionToPolicyByCustomer(businessUnit, customerNumber, policyNum, symbol, mod);
        }
        
        public System.Threading.Tasks.Task<string> PromoteSubmissionToPolicyByCustomerAsync(string businessUnit, string customerNumber, string policyNum, string symbol, string mod) {
            return base.Channel.PromoteSubmissionToPolicyByCustomerAsync(businessUnit, customerNumber, policyNum, symbol, mod);
        }
        
        public void DeleteDocument(string docID) {
            base.Channel.DeleteDocument(docID);
        }
        
        public System.Threading.Tasks.Task DeleteDocumentAsync(string docID) {
            return base.Channel.DeleteDocumentAsync(docID);
        }
        
        public string GetDocumentSection(string docCategory, string docType) {
            return base.Channel.GetDocumentSection(docCategory, docType);
        }
        
        public System.Threading.Tasks.Task<string> GetDocumentSectionAsync(string docCategory, string docType) {
            return base.Channel.GetDocumentSectionAsync(docCategory, docType);
        }
        
        public string[] GetAllDocumentSections() {
            return base.Channel.GetAllDocumentSections();
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllDocumentSectionsAsync() {
            return base.Channel.GetAllDocumentSectionsAsync();
        }
        
        public string[] GetDocCategory() {
            return base.Channel.GetDocCategory();
        }
        
        public System.Threading.Tasks.Task<string[]> GetDocCategoryAsync() {
            return base.Channel.GetDocCategoryAsync();
        }
        
        public string[] GetDocTypes(string docCategory) {
            return base.Channel.GetDocTypes(docCategory);
        }
        
        public System.Threading.Tasks.Task<string[]> GetDocTypesAsync(string docCategory) {
            return base.Channel.GetDocTypesAsync(docCategory);
        }
        
        public string GetSupportedFileTypes() {
            return base.Channel.GetSupportedFileTypes();
        }
        
        public System.Threading.Tasks.Task<string> GetSupportedFileTypesAsync() {
            return base.Channel.GetSupportedFileTypesAsync();
        }
        
        public string ConvertDateToW3CFormat(string simpleDateString) {
            return base.Channel.ConvertDateToW3CFormat(simpleDateString);
        }
        
        public System.Threading.Tasks.Task<string> ConvertDateToW3CFormatAsync(string simpleDateString) {
            return base.Channel.ConvertDateToW3CFormatAsync(simpleDateString);
        }
        
        public string TestEDocWebService() {
            return base.Channel.TestEDocWebService();
        }
        
        public System.Threading.Tasks.Task<string> TestEDocWebServiceAsync() {
            return base.Channel.TestEDocWebServiceAsync();
        }
        
        public string GetVersion() {
            return base.Channel.GetVersion();
        }
        
        public System.Threading.Tasks.Task<string> GetVersionAsync() {
            return base.Channel.GetVersionAsync();
        }
        
        public com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.statusCode GetStatus() {
            return base.Channel.GetStatus();
        }
        
        public System.Threading.Tasks.Task<com.gaic.insuredPortal.Provider.WcfServices.eDocMtomService.statusCode> GetStatusAsync() {
            return base.Channel.GetStatusAsync();
        }
    }
}
